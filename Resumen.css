* {
    /* Transitions */
    /* transition es una propiedad de CSS3 para crear animaciones. */
    
    /* Ha partir de un evento en el navegador es posible hacer que las propiedades CSS de un elemento en el DOM cambien de forma continua.  */
    /* Por ejemplo un elemento de tamaño ‘x’ a tamaño ‘y’ en una determinada cantidad de tiempo, o de un color a otro, etc. */
    
    /*Qué propiedades va a cambiar en la transición*/
    transition-property: width, height;
    
    /*Cuánto tiempo va a durar la transición*/
    transition-duration: 1s;
    
    /*Cuánto tiempo va a tardar la transición en ocurrir*/
    transition-delay: 250ms;
    
    /*Función que determina de qué forma se calculan los valores intermedios de la transición*/
    transition-timing-function: ease;

    /* Rotar elemento = rotate(grados)
    Sesgar elemento = skew(grados)
    Cambiar posición = translate(pixeles)
    Cambiar tamaño = scale(1 = 100%, 2 = 200%, 0 ) */
    
    /* transform rotate */
    /* Rotacion en el eje X */
    transform: rotateX(45deg);
    /* Rotacion en el eje Y */
    transform: rotateY(45deg);
    /* rotacion a lado contrario a las manicillas del reloj */
    transform: rotate(-45deg);
    /* Anidando transform rotate */
    transform: rotateX(45deg) rotateY(45deg) rotateZ(45deg);

    /* Rotacion en 3D, se coloca 1 en los grados que se desea girar */
    /* transform: rotate3d(x,y,z,rotate); */
    transform: rotate3d(1,0,0,45deg)

    /* Sintaxis de Animation */

    Para crear una animación CSS usaremos la propiedad animation y sus sub-propiedades, con las cuales podemos configurar el ritmo, la duración, etc

    Las subpropiedades de animation son
    
    animation-delay
    Tiempo de retardo entre el momento en que el elemento se carga y el comienzo de la secuencia de la animación.
    
    animation-direction
    Indica si la animación debe retroceder hasta el fotograma de inicio al finalizar la secuencia o si debe comenzar desde el principio al llegar al final.
    
    animation-duration
    Indica la cantidad de tiempo que la animación consume en completar su ciclo (duración).
    
    animation-iteration-count
    El número de veces que se repite. Podemos indicar infinite para repetir la animación indefinidamente.
    
    animation-name
    Especifica el nombre de la regla @keyframes que describe los fotogramas de la animación.
    
    animation-play-state
    Permite pausar y reanudar la secuencia de la animación.
    
    animation-timing-function
    Indica el ritmo de la animación, es decir, como se muestran los fotogramas de la animación, estableciendo curvas de aceleración.
    
    animation-fill-mode
    Especifica qué valores tendrán las propiedades después de finalizar la animación (los de antes de ejecutarla, los del último fotograma de la animación o ambos).

    ease: por defecto
    ease-in: se suaviza al entrar o al inicio
    ease-out: se suaviza al salir o al finalizar
    ease-in-out: se suaviza al entrar y salir, básicamente se acelera solo la mitad de la animación

    steps(frames por segundo): como el lag en los juegos en linea (?), mientras más bajo será menos fluido

    Otra herramienta que puede ser útil desde CSS3 es will-change.
will-change prepara (avisa/notifica) al navegador para que al renderizar una animación no genere impresiones extra del objeto o imagen que ‘va a cambiar’.

developer.mozilla.org nos advierte que will-change es para ser usado sólo como un último recurso en situaciones de problemas existentes de performance y no para ‘anticipar’ problemas.

Dicho esto los recursos para los que will-changeestá optimizado son opacity y transform aunque mozilla agrega otros.

Ejemplo de animacion en JS

/* const caja=document.getElementById('caja')

            //element.animate(keyframes = [], option = {})
            caja.animate([
                {
                    transform: 'translatex(0)'
                },
                {
                    transform: 'translate(380px)'
                }
            ], {
                duration: 2000,
                delay: 1000,
                direction: 'normal',
                easing: 'linear',
                iterations:2,
                fill: 'forwards',
                iterationStart: .5
                //endDelay: 5000;
            }) */

}